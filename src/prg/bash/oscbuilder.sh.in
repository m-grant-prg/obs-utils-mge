#! @bashlocation@
#########################################################################
#									#
#	oscbuilder.sh is automatically generated,			#
#		please do not modify!					#
#									#
#########################################################################

#########################################################################
#									#
# Script ID: oscbuilder.sh						#
# Author: Copyright (C) 2022  Mark Grant				#
#									#
# Released under the GPLv3 only.					#
# SPDX-License-Identifier: GPL-3.0-only					#
#									#
# Purpose:								#
# A helper script to perform an osc build.				#
#									#
# Syntax:	oscbuilder.sh [ -a or --arch 'arch-name'		#
#			|| -h or --help					#
#			|| -r or --repo 'Repository'			#
#			|| -V or --version				#
#			|| -- param for osc build ]			#
#									#
# Exit codes used:-							#
# Bash standard Exit Codes:	0 - success				#
#				1 - general failure			#
# User-defined exit code range is 64 - 113				#
#	C/C++ Semi-standard exit codes from sysexits.h range is 64 - 78	#
#		EX_USAGE	64	command line usage error	#
#		EX_DATAERR	65	data format error		#
#		EX_NOINPUT	66	cannot open input		#
#		EX_NOUSER	67	addressee unknown		#
#		EX_NOHOST	68	host name unknown		#
#		EX_UNAVAILABLE	69	service unavailable		#
#		EX_SOFTWARE	70	internal software error		#
#		EX_OSERR	71	system error (e.g., can't fork)	#
#		EX_OSFILE	72	critical OS file missing	#
#		EX_CANTCREAT	73	can't create (user) output file	#
#		EX_IOERR	74	input/output error		#
#		EX_TEMPFAIL	75	temp failure; user is invited	#
#					to retry			#
#		EX_PROTOCOL	76	remote error in protocol	#
#		EX_NOPERM	77	permission denied		#
#		EX_CONFIG	78	configuration error		#
#	User-defined (here) exit codes range 79 - 113:			#
#		None							#
#									#
# Further Info:								#
#									#
#########################################################################

#########################################################################
#									#
# Changelog								#
#									#
# Date		Author	Version	Description				#
#									#
# 19/04/2022	MG	1.0.1	Created.				#
# 30/07/2022	MG	1.0.2	Fix sed for Fedora.			#
#									#
#########################################################################


set -eo pipefail


##################
# Init variables #
##################
readonly outputprefix="$(basename $0):"

readonly version=1.0.2				# Script version
readonly packageversion=@pkgversion@		# Package version

arch="x86_64"					# Default architecture
cla=""


#############
# Functions #
#############

# -h --help output.
# No parameters
# No return value
usage()
{
cat << EOF
Usage is $(basename "$0") [options]
	-a or --arch 'arch-name' Target architecture
	-h or --help Display this help information
	-r or --repo 'Repository'
	-V or --version Print script version information
	-- then params to pass directly to osc build

Example
	$(basename "$0") -r Fedora_35 -a x86_64 -- --no-verify
EOF
}

# Standard function to emit messages depending on various parameters.
# Parameters -	$1 What:-	The message to emit.
#		$2 Where:-	stdout == 0
#				stderr == 1
# No return value.
output()
{
	if (( !$2 )); then
		printf "%s\n" "$1"
	else
		printf "%s\n" "$1" 1>&2
	fi
}

# Standard function to tidy up and return exit code.
# Parameters - 	$1 is the exit code.
# No return value.
script_exit()
{
	exit $1
}

# Standard function to test command error and exit if non-zero.
# Parameters - 	$1 is the exit code, (normally $? from the preceeding command).
# No return value.
std_cmd_err_handler()
{
	if (( $1 )); then
		script_exit $1
	fi
}

# Standard trap exit function.
# No parameters.
# No return value.
trap_exit()
{
	local -i exit_code=$?
	local msg

	msg="Script terminating with exit code $exit_code due to trap received."
	output "$msg" 1
	script_exit $exit_code
}

# Setup trap
trap trap_exit SIGHUP SIGINT SIGQUIT SIGTERM


# Process command line arguments with GNU getopt.
# Parameters -	$1 is the command line.
# No return value.
proc_CL()
{
	local GETOPTTEMP
	local msg
	local tmp

	tmp="getopt -o a:hr:V --long arch:,help,repo:,version"
	GETOPTTEMP=$($tmp -n "$0" -- "$@")
	std_cmd_err_handler $?

	eval set -- "$GETOPTTEMP"
	std_cmd_err_handler $?

	while true; do
		case "$1" in
		-a|----arch)
			arch=$2
			shift 2
			;;
		-h|--help)
			usage
			shift
			script_exit 0
			;;
		-r|--repo)
			repo=$2
			shift 2
			;;
		-V|--version)
			printf "%s Script version %s\n" $0 $version
			printf "%s Package version %s\n" $0 $packageversion
			shift
			script_exit 0
			;;
		--)	shift
			break
			;;
		*)	output "Internal error." 1
			script_exit 64
			;;
		esac
	done

	# Preserve remaining arguments. All remaining arguments are passed
	# straight to the osc build command line, (to support things like
	# --no-verify... etc).
	if (( $# )); then
		cla=$@
	fi
}

# Set current ditribution as default.
set_dist_default()
{
	if [[ $repo = "" ]]; then
		predisttarg="lp%{?leap_version}."
		postdisttarg=""
		# Get openSUSE running version to use as default
		if [ -e /etc/os-release ]; then
			repo=$(sed -n '/^PRETTY_NAME=/s/^.*=//p' /etc/os-release | \
			sed -e 's/"//g' -e 's/ /_/g' -e 's/_GNU\/Linux//g' \
				-e 's/_Linux//g' -e 's/_(.*$//g')
		else
			repo=$(sed -n '/^PRETTY_NAME=/s/^.*=//p' /usr/lib/os-release | \
			sed -e 's/"//g' -e 's/ /_/g' -e 's/_GNU\/Linux//g' \
				-e 's/_Linux//g' -e 's/_(.*$//g')
		fi
	elif [[ $repo == *"openSUSE_Leap_"* ]]; then
		predisttarg="lp%{?leap_version}."
		postdisttarg=""
	fi
}

# Prepare the spec file release string.
prep_spec_release()
{
	for specfile in $(ls *.spec.in); do
		awk -v prearg="$predisttarg" -v postarg="$postdisttarg" \
			'{ gsub(/@precompatrelease[@]/,prearg); \
			gsub(/@postcompatrelease[@]/,postarg); \
			print ; }' "$specfile" > ${specfile%.in}
	done
}


########
# Main #
########

proc_CL "$@"

set_dist_default

prep_spec_release

rm -vf ../../$repo/$arch/pkgs/*

osc build -k ~/SWDev/oscbuilder/$repo/$arch/built-pkgs \
	-p ~/SWDev/oscbuilder/$repo/$arch/tmp-pkg-cache \
	$repo $arch $cla

# And exit.
script_exit 0

